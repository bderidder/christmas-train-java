enum TrainDirection
{
    FORWARD
    REVERSE
}

type ControllerStatus
{
    direction: TrainDirection
    brake: Boolean
    speed: Int
}

type ClientInfo
{
    id: Int
    master: Boolean
    admin: Boolean
}

# The Root Query for the application
type Query
{
    # Simple methods to control the train
    #
    # mutation - setSpeed(int) : ControllerStatus
    # mutation - setDirection(enum) : ControllerStatus
    # mutation - applyBrake() : ControllerStatus
    # query - getControllerStatus() : ControllerStatus
    #   ! subscriptions for this query
    #
    #
    # Methods to share controller with other clients
    #
    # mutation - makeClientMaster(int: clientId) : ClientStatus
    # query - getClientStatus() : ClientStatus
    #   ! subscriptions for this query
    #
    #
    # Methods to manage simultaneously connected clients
    #
    # query - getClients() : [ClientStatus]
    #   ! subscriptions for this query
    # mutation - makeClientAdmin(int: clientId)
    # mutation - takeAdmin(string: secret)

    getControllerStatus : ControllerStatus!

    #getClientStatus : ClientInfo!

    #getClients: [ClientInfo!]!
}

type Mutation
{
    # sets the new speed of the train, must be a value between 0 and 100
    setSpeed(speed: Int!) : ControllerStatus!
    setDirection(direction: TrainDirection!) : ControllerStatus!
    setBrake(brakeApplied: Boolean!) : ControllerStatus!
}
